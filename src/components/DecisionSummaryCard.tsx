
import React from 'react';
import { Agent, Message } from '../types';
import { BusinessData } from '../types/businessData';
import { Button } from '@/components/ui/button';
import { 
  Download, FileText, BarChart3, AlertTriangle, 
  Calendar, CheckSquare, LineChart, Users, 
  Briefcase, ArrowRight
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface DecisionSummaryCardProps {
  messages: Message[];
  agents: Agent[];
  businessData: BusinessData;
  discussionTopic?: string; 
  onExport: () => void;
}

const DecisionSummaryCard = ({ 
  messages, 
  agents, 
  businessData, 
  discussionTopic, 
  onExport 
}: DecisionSummaryCardProps) => {
  const { toast } = useToast();
  
  // Format the date for the header
  const formattedDate = new Date().toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
  
  // Generate a simulated decision summary based on the discussion
  // In a real app, this would be generated by an AI model
  const summary = {
    title: discussionTopic || 'Business Performance Review',
    executiveSummary: `The executive team has reviewed ${businessData.companyName}'s current performance metrics and strategic initiatives. The team has identified key opportunities for growth in the ${businessData.marketingData.slice(-1)[0].topPerformingMarket} market, while acknowledging challenges related to ${businessData.hrData.slice(-1)[0].attritionRate * 100}% attrition rate and ${businessData.technologyData.slice(-1)[0].technicalDebt} technical debt score.`,
    
    agentInsights: {
      ceo: `As CEO, I recommend focusing on our core strength in ${businessData.marketingData.slice(-1)[0].topPerformingProduct} while exploring expansion opportunities in ${businessData.marketingData.slice(-1)[0].topPerformingMarket}. Our revenue growth of ${businessData.financialData.slice(-1)[0].revenueGrowth * 100}% year-over-year positions us well for strategic investments.`,
      
      cfo: `From a financial perspective, our profit margin of ${businessData.financialData.slice(-1)[0].profitMargin * 100}% and ROI of ${businessData.financialData.slice(-1)[0].roi * 100}% exceed industry benchmarks. I suggest increasing R&D budget allocation by 5% to support product development initiatives outlined by our CTO.`,
      
      cto: `Our technology stack includes ${businessData.technologyData.slice(-1)[0].techStack.join(', ')}, with recent improvements in ${businessData.technologyData.slice(-1)[0].recentUpdates.join(', ')}. I propose accelerating our cloud migration to reduce infrastructure costs by an estimated 18% within 8 months.`,
      
      hr: `With a workforce of ${businessData.hrData.slice(-1)[0].totalEmployees} employees and ${businessData.hrData.slice(-1)[0].remotePercentage * 100}% working remotely, we need to address our ${businessData.hrData.slice(-1)[0].attritionRate * 100}% attrition rate. I recommend implementing a revised compensation structure and enhanced career development program.`
    },
    
    risks: [
      "Market volatility in the technology sector could affect projected revenue targets",
      `Technical debt score of ${businessData.technologyData.slice(-1)[0].technicalDebt} might slow down new feature delivery`,
      "Increasing competition in our primary market segment",
      `Attrition rate of ${businessData.hrData.slice(-1)[0].attritionRate * 100}% threatens key talent retention`
    ],
    
    actionItems: [
      { action: "Finalize Q3 marketing budget allocation", owner: "CFO & CMO", timeline: "1 week" },
      { action: "Begin cloud infrastructure migration", owner: "CTO", timeline: "3 months" },
      { action: "Launch revised employee retention program", owner: "HR Director", timeline: "1 month" },
      { action: `Explore expansion into ${businessData.marketingData.slice(-1)[0].topPerformingMarket} market`, owner: "CEO & CSO", timeline: "2 quarters" }
    ],
    
    followUpSuggestion: "The board should reconvene in 30 days to review progress on the cloud migration initiative and receive a preliminary report on the employee retention program results."
  };
  
  // Function to handle copying the summary to clipboard
  const handleCopySummary = () => {
    const summaryText = `
# DECISION SUMMARY: ${summary.title.toUpperCase()}
Date: ${formattedDate}
Company: ${businessData.companyName}

## EXECUTIVE SUMMARY
${summary.executiveSummary}

## KEY INSIGHTS
CEO: ${summary.agentInsights.ceo}

CFO: ${summary.agentInsights.cfo}

CTO: ${summary.agentInsights.cto}

HR: ${summary.agentInsights.hr}

## RISKS & CHALLENGES
${summary.risks.map(risk => `- ${risk}`).join('\n')}

## ACTION ITEMS
${summary.actionItems.map(item => `- ${item.action} (Owner: ${item.owner}, Timeline: ${item.timeline})`).join('\n')}

## FOLLOW-UP
${summary.followUpSuggestion}
    `;
    
    navigator.clipboard.writeText(summaryText).then(() => {
      toast({
        title: "Summary Copied",
        description: "Decision summary copied to clipboard",
        duration: 3000,
      });
    }).catch(err => {
      console.error('Failed to copy summary:', err);
      toast({
        title: "Copy Failed",
        description: "Failed to copy summary to clipboard",
        variant: "destructive",
        duration: 3000,
      });
    });
  };
  
  return (
    <div className="summary-card animate-fade-in">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h2 className="text-2xl font-bold">ðŸ“‹ Decision Summary</h2>
          <p className="text-muted-foreground">{formattedDate} â€¢ {businessData.companyName}</p>
        </div>
        
        <div className="flex gap-2">
          <Button variant="outline" onClick={handleCopySummary} size="sm">
            <FileText className="mr-2 h-4 w-4" />
            Copy
          </Button>
          <Button onClick={onExport} size="sm">
            <Download className="mr-2 h-4 w-4" />
            Export
          </Button>
        </div>
      </div>
      
      <div className="summary-section">
        <h3 className="summary-heading">
          <BarChart3 className="h-5 w-5 text-primary" />
          Executive Summary
        </h3>
        <div className="summary-content">
          <p>{summary.executiveSummary}</p>
        </div>
      </div>
      
      <div className="summary-section">
        <h3 className="summary-heading">
          <Users className="h-5 w-5 text-primary" />
          Executive Insights
        </h3>
        <div className="grid md:grid-cols-2 gap-4 mt-4">
          {Object.entries(summary.agentInsights).map(([role, insight]) => {
            const agent = agents.find(a => a.role.toLowerCase() === role);
            
            return (
              <div key={role} className="insight-card">
                <div className="flex items-center gap-2 mb-2">
                  <div 
                    className="h-8 w-8 rounded-full flex items-center justify-center"
                    style={{ backgroundColor: agent?.color || '#6E56CF' }}
                  >
                    {role === 'ceo' && <Briefcase className="h-4 w-4 text-white" />}
                    {role === 'cfo' && <LineChart className="h-4 w-4 text-white" />}
                    {role === 'cto' && <BarChart3 className="h-4 w-4 text-white" />}
                    {role === 'hr' && <Users className="h-4 w-4 text-white" />}
                  </div>
                  <span className="font-medium">{role.toUpperCase()} Insight</span>
                </div>
                <p className="text-sm">{insight}</p>
              </div>
            );
          })}
        </div>
      </div>
      
      <div className="summary-section">
        <h3 className="summary-heading">
          <AlertTriangle className="h-5 w-5 text-primary" />
          Risks & Challenges
        </h3>
        <div className="summary-content">
          <ul className="space-y-2">
            {summary.risks.map((risk, index) => (
              <li key={index} className="flex items-start gap-2">
                <span className="text-destructive">â€¢</span>
                <span>{risk}</span>
              </li>
            ))}
          </ul>
        </div>
      </div>
      
      <div className="summary-section">
        <h3 className="summary-heading">
          <CheckSquare className="h-5 w-5 text-primary" />
          Action Items
        </h3>
        <div className="summary-content">
          <div className="overflow-x-auto">
            <table className="w-full border-collapse">
              <thead>
                <tr>
                  <th className="text-left py-2 font-medium text-muted-foreground">Action</th>
                  <th className="text-left py-2 font-medium text-muted-foreground">Owner</th>
                  <th className="text-left py-2 font-medium text-muted-foreground">Timeline</th>
                </tr>
              </thead>
              <tbody>
                {summary.actionItems.map((item, index) => (
                  <tr key={index} className="border-t border-border">
                    <td className="py-2">{item.action}</td>
                    <td className="py-2">{item.owner}</td>
                    <td className="py-2">{item.timeline}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
      
      <div className="summary-section mb-0">
        <h3 className="summary-heading">
          <Calendar className="h-5 w-5 text-primary" />
          Follow-up
        </h3>
        <div className="summary-content">
          <p>{summary.followUpSuggestion}</p>
        </div>
      </div>
      
      <div className="mt-6 pt-6 border-t border-border">
        <div className="flex justify-between items-center">
          <p className="text-sm text-muted-foreground">Generated by AI Boardroom</p>
          <Button variant="ghost" size="sm" className="gap-1" onClick={onExport}>
            Share <ArrowRight className="h-4 w-4" />
          </Button>
        </div>
      </div>
    </div>
  );
};

export default DecisionSummaryCard;
